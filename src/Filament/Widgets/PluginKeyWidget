<?php

namespace Startupful\StartupfulPlugin\Filament\Widgets;

use Filament\Forms;
use Filament\Widgets\Widget;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Session;
use Filament\Notifications\Notification;
use Illuminate\Support\Facades\Log;

class PluginKeyWidget extends Widget
{
    protected static string $view = 'startupful-plugin::filament.widgets.plugin-key-widget';

    public ?string $pluginKey = '';
    public bool $isVerified = false;

    protected $mainServerUrl = 'https://startupful.io';

    public function mount()
    {
        $this->pluginKey = Session::get('plugin_key', '');
        $this->isVerified = Session::get('is_verified', false);
    }

    protected function getFormSchema(): array
    {
        return [
            Forms\Components\TextInput::make('pluginKey')
                ->label('Plugin Key')
                ->required()
                ->disabled($this->isVerified),
        ];
    }

    public function verifyOrRemove()
    {
        if ($this->isVerified) {
            $this->removeSubscription();
        } else {
            $this->verifySubscription();
        }
    }

    protected function verifySubscription()
    {
        try {
            Log::info('Attempting to verify subscription', ['plugin_key' => $this->pluginKey, 'domain' => request()->getHost()]);
            
            $response = Http::post($this->mainServerUrl . '/api/verify-subscription', [
                'paddle_id' => $this->pluginKey,
                'domain' => request()->getHost(),
            ]);
            
            Log::info('Received response from server', ['status' => $response->status(), 'body' => $response->body()]);
            
            if ($response->successful()) {
                $responseData = $response->json();
                Session::put('plugin_key', $this->pluginKey);
                Session::put('is_verified', true);
                $this->isVerified = true;
                Notification::make()
                    ->title($responseData['message'] ?? 'Subscription verified successfully')
                    ->success()
                    ->send();
            } else {
                $errorMessage = $response->json()['message'] ?? $response->body() ?? 'Unknown error';
                Notification::make()
                    ->title('Failed to verify subscription')
                    ->body($errorMessage)
                    ->danger()
                    ->send();
            }
        } catch (\Exception $e) {
            Log::error('Exception occurred while verifying subscription', ['error' => $e->getMessage(), 'trace' => $e->getTraceAsString()]);
            
            Notification::make()
                ->title('Failed to verify subscription')
                ->body('An error occurred: ' . $e->getMessage())
                ->danger()
                ->send();
        }
    }

    protected function removeSubscription()
    {
        try {
            $response = Http::post($this->mainServerUrl . '/api/remove-subscription', [
                'domain' => request()->getHost(),
            ]);
            
            if ($response->successful()) {
                $responseData = $response->json();
                Session::forget('plugin_key');
                Session::forget('is_verified');
                $this->pluginKey = '';
                $this->isVerified = false;
                Notification::make()
                    ->title($responseData['message'] ?? 'Subscription removed successfully')
                    ->success()
                    ->send();
            } else {
                $errorMessage = $response->json()['message'] ?? $response->body() ?? 'Unknown error';
                Notification::make()
                    ->title('Failed to remove subscription')
                    ->body($errorMessage)
                    ->danger()
                    ->send();
            }
        } catch (\Exception $e) {
            Notification::make()
                ->title('Failed to remove subscription')
                ->body('An error occurred: ' . $e->getMessage())
                ->danger()
                ->send();
        }
    }

    public function render()
    {
        return view('startupful-plugin::filament.widgets.plugin-key-widget', [
            'formSchema' => $this->getFormSchema(),
        ]);
    }
}